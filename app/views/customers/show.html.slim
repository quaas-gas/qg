.page-header
  = delete_link @customer
  = edit_link edit_customer_path(@customer)
  = list_link Customer
  = new_link new_delivery_url(customer_id: @customer.id), primary: false, label: 'Neue Lieferung'
  h2
    => customer_icon
    => customer_type_icon @customer
    => @customer.name
    small = Customer.model_name.human

.row
  .col-md-8
    .well.well-sm
      /span.label.label-default> = @customer.region
      span.label.label-default> = @customer.kind
      - if @customer.has_stock
        span.label.label-default>  BestandsfÃ¼hrung
      span.label.label-default> = @customer.gets_invoice ? 'Rechnungskunde' : 'Barzahler'
      - if @customer.archived
        span.label.label-danger>  = Customer.human_attribute_name(:archived)
    .row
      .col-md-6
        p = @customer.salut
        p = @customer.name
        p = @customer.name2
        p = @customer.notes

      .col-md-6
        p = @customer.street
        p
          => @customer.zip
          = @customer.city
        p = link_to fa_icon('map-o', text: 'Karte'), gmaps_link(@customer), target: '_blank'
        p = @customer.phone
        p = @customer.mobile
        p = @customer.email

  .col-md-4 style="overflow-y: scroll; height: 175px;"
    h4
      = @customer.tax ? 'Bruttopreise' : 'Nettopreise'
      spn.pull-right
        = link_to edit_customer_url(@customer, part: 'prices'), class: 'btn btn-default btn-xs' do
          = fa_icon 'cog', text: t(:edit)
    table.table.table-condensed.table-hover.table-striped
      tbody class=(@customer.tax ? 'tax' : 'nontax')
        - @customer.prices.joins(:product).order('products.size').each do |price|
          tr
            td = price.product.number
            td
              - res = []
              - res << 'LS' if price.active
              - res << 'BF' if price.in_stock
              = res.join ', '
            td.price = display_price price.price
            td.price = display_price price.discount

h3 Verlauf

- products_in_stock = @customer.prices.in_stock.includes(:product).map(&:product)
- products_ids = products_in_stock.map(&:id)
table.table.table-condensed.table-hover.table-striped.table-clickable
  thead
    tr
      th
      th
      th
      - products_in_stock.each do |product|
        th.price = product.number
      th
  tbody
    - if (stock = @customer.current_stock)
      tr.stock
        td
        td Aktueller Bestand
        td = ldate stock.date
        - products_in_stock.each do |product|
          td.price
            - if (item = stock.items.to_a.find { |i| i.product_id == product.id })
              = item.count
        td
    - @customer.history(24).each do |delivery|
      - if delivery.is_a? Delivery
        tr.delivery data={ url: url_for(delivery) } class=(delivery.tax ? 'tax' : 'nontax') class=(delivery.pending? ? 'warning' : '')
          td = delivery_type_icon delivery
          td = delivery.number
          td = ldate delivery.date
          - products_in_stock.each do |product|
            - item = delivery.items.to_a.find { |i| i.product_id == product.id }
            - if item
              - stock_diff = item.stock_diff
              td.price class=('danger' if stock_diff < 0) class=('success' if stock_diff > 0)
                => item.count_back
                | |
                =<> item.count
                | |
                =< stock_diff
            - else
              td

          td.price = display_price delivery.total_price
      - if delivery.is_a? Invoice
        - invoice = delivery
        tr.invoice data={ url: url_for(invoice) } class=(invoice.tax ? 'tax' : 'nontax')
          td = invoice_icon
          td = invoice.number
          td = ldate invoice.date
          - products_in_stock.each do |product|
            td.price
              - if (item = invoice.items.to_a.find { |i| i.product_id == product.id })
                = item.count
          td.price = display_price invoice.total_price
      - if delivery.is_a? Stock
        - stock = delivery
        tr.stock
          td = stock_icon
          td Bestand
          td = ldate stock.date
          - products_in_stock.each do |product|
            td.price
              - if (item = stock.items.to_a.find { |i| i.product_id == product.id })
                = item.count
          td
